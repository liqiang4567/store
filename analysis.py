'''
[Intro]
Plot
# (1) the overlap of each xi window,
# (2) the variance in each trajectory,
# (3) potential of mean force,
# (4) recrossing factor,
for a single task.

[Usage]
run `python <this file name>` then you will be ask to input a path containing a result for a single task.
Then you'll get all four figures above if your task ended normally.
Attention, please! The former figures will be deleted when the program started running.
'''

import numpy as np
import matplotlib.pyplot as plt
import os

color = ['#00447c', '#ae0d16', '#47872c', '#800964']
# SHU Blue, Weichang Red, Willow Green, SHU Purple
# This color scheme can be easily obtained on the official website `vi.shu.edu.cn`.

def input_path():
    path = input('Please input the result folder: ')
    return path

def plot_parameters(title):
    print('Plotting '+title)
    plt.figure(figsize=(4, 3))
    plt.rcParams["font.family"] = "Times New Roman"
    plt.rcParams["mathtext.fontset"] = "stix" # The font closet to Times New Roman
    plt.rcParams['xtick.direction'] = 'in'

    file = title+'.png'
    if os.path.exists(file):
        os.remove(file)            #Delete the previous image if one exists



def plot_save(name):
    plt.tight_layout()

    # plt.savefig(os.path.join(path,name + '.png'), dpi=600) # .svg is recommended!
    plt.savefig(os.path.join(figPath,name + '.png'), dpi=600)

    plt.clf()        #Clear the current figure.
    plt.close()      #Close a figure window.


def get_tail(fname):
    fp = open(fname, 'r')
    last_line = fp.readlines()[-1]    #Read the last line of the file
    #print(last_line)
    fp.close()
    return last_line


def get_xav(fname):
    line = get_tail(fname)
    line_element = line.split()
    #print(line_element)
    Nl = len(line_element)
    if Nl < 3:
        raise ValueError("The last line doesn't contain 'mean' and 'xav2'. ")
    elif line_element[3] == "=" or line_element[3] == "*":
        print("error\n",fname)
    else:
        mean = np.float(line_element[3])
        xav2 = np.float(line_element[4])
    return mean, xav2

def my_gaussian(x, mean, xav2):
    y=(1.0/np.sqrt(2.0*np.pi*xav2))*np.exp(-(x-mean)**2/(2.0*xav2))
    return y

def get_xilist(path):
    fileList = os.listdir(path)   #List the filename in the input path
    xiList = []
    for file in fileList:
        if file[0:17] == 'umbrella_sampling':
            #xiList.append(np.float(file[18:25].rstrip('.'))) # rstrip():A new string generated by deleting the specified character at the end of the string
            xiList.append(np.float(file[18:24]))
    xiList.sort() # Sort, ascending by default
    #print(xiList)
    return xiList

def plot_overlap(path, xiList):
    a=0
    title = 'Overlap'
    plot_parameters(title)

    resolution = 2000
    extend = 0 # 3E-2

    xiMin = np.min(xiList)
    xiMax = np.max(xiList)
    length = len(xiList)


    x_new = np.linspace(xiMin - extend, xiMax + extend, resolution)
    y_sum = np.zeros(resolution) # Total density line
    A=[]
    for i in range(length):
        if a>=4:
            a=0
        fname = path + "/umbrella_sampling_{0:.4f}.dat".format(xiList[i])
        #print(fname)
        if os.path.isfile(fname):    #Used to determine whether an object (with an absolute path) is a file
            # Gaussian smearing
            mean, xav2 = get_xav(fname)
            y_new = my_gaussian(x_new, mean, xav2)

            # Find biggest population
            maxPop = max(y_new)
            A.append(maxPop)
            maxA=max(A)

            y_sum += y_new
            # sum all population
            if xav2 > 5.0E-5:
                print("[WARNING] May be too various in xi = {0:.4f}! ".format(xiList[i]))
                plt.plot(x_new, y_new, lw=2, c=color[1])  #alpha=0.8)   #red
            else:
                plt.plot(x_new, y_new, lw=0.5, c=color[a],  alpha=.6)
                a+=1

    plt.xlabel('Reaction Coordinate')
    plt.ylabel('Population')
    # plt.legend(loc="best") # No legend

    plt.xlim(xiMin - extend, xiMax + extend)
    plt.ylim(0, maxA*1.1)
    # plt.show()

    plot_save(title)

def plot_variance(path, xiList):
    title = 'Variance'
    plot_parameters(title)

    xiMin = np.min(xiList)
    xiMax = np.max(xiList)
    length = len(xiList)

    for i in range(length):
        fname = path + "/umbrella_sampling_{0:.4f}.dat".format(xiList[i])
        f = open(fname, 'r')
        fLines = f.readlines()
        #print(fLines[214:])
        #print ("a00",fLines)
        f.close()

        timeEvolution = []
        xivar = []
        for line in fLines[15:]:
            lineSplit = line.split()
            timeEvolution.append(np.float(lineSplit[2]))
            #print(timeEvolution)
            xivar.append(np.float(lineSplit[-1]))
            #print(xivar)

        timeEvolution = [x * 1E-6 for x in timeEvolution]


        plt.xlabel('$t$ / ns')
        plt.ylabel('Variance')

        xivar1=np.array(xivar)
        A=np.std(xivar1)   #Matrix standard deviation
        if A>=1e-5:
            print (fname)
        plt.plot(timeEvolution, xivar, lw=0.2, c=color[0], alpha=0.5)

    plot_save(title)

def plot_pmf(path):
    title = 'PMF'
    plot_parameters(title)

    try:
        f = open(path + '/potential_of_mean_force.dat', 'r')  #如果try出现问题则执行cxcept否则执行else
    except FileNotFoundError:
        print('[ERROR] {} file not found! '.format(title))
    else:
        fLines = f.readlines()
        f.close()

        xi = []
        pmf = []
        for i in fLines[12:-1]:   #Line 13 to the last line
            xi.append(np.float(i.split()[0]))
            pmf.append(np.float(i.split()[1]))
        N=len(pmf)
        pmf=pmf-np.ones(N)*pmf[0]
        print (max(pmf))

        plt.xlabel(r'$\xi$')
        plt.ylabel(r'$W(\xi)$ / eV')
        plt.plot(xi, pmf, c=color[0])
        plt.tick_params(direction='in')  #Set the number of ticks inside
        plot_save(title)

def plot_rexFactor(path):
    title = 'Transmission_Coefficient'
    plot_parameters(title)

    # Find the file first!
    fileList = os.listdir(path)
    rexFileName = ''
    for file in fileList:
        if file[:18] == 'recrossing_factor_':
            rexFileName = file

    try:
        f = open(path + '/' + rexFileName, 'r')
    except FileNotFoundError:
        print('[ERROR] {} file not found! '.format(title))
    except PermissionError:
        print('[ERROR] {} file not found! '.format(title))
    else:
        fLines = f.readlines()
        f.close()
        time = []
        kappa = []
        for i in fLines[17:-2]:  #Line 17 to the second to last line
            ele = i.split()
            time.append(np.float(ele[0]))
            kappa.append(np.float(ele[-1]))

        plt.xlabel('$t$ / fs')
        plt.ylabel('$\kappa(t)$')

        # plt.xscale('log')

        plt.xlim(time[0], time[-1])
        # endRF = np.mean(kappa[-5:])
        plt.axhline(y=kappa[-1], c=color[0], lw=0.5, linestyle='--')

        plt.plot(time, kappa, c=color[0])
        plt.tick_params(direction='in')
        # plt.show()
        plot_save(title)



if __name__=="__main__":
    path = input_path()
    figPath = os.path.join(path, 'fig')
    os.mkdir(figPath)
    xiList = get_xilist(path)
    plot_overlap(path, xiList)
    plot_variance(path, xiList)
    plot_pmf(path)
    plot_rexFactor(path)

